{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\fileshare\\\\client\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport axios, { setAuthToken } from '../utils/axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem('token'));\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Load user if token exists\n  useEffect(() => {\n    const loadUser = async () => {\n      try {\n        if (token) {\n          setAuthToken(token);\n          const res = await axios.get('/api/auth/me');\n          setUser(res.data.data);\n          setIsAuthenticated(true);\n        } else {\n          setAuthToken(null);\n          setUser(null);\n          setIsAuthenticated(false);\n        }\n      } catch (err) {\n        var _err$response, _err$response$data;\n        console.error('Error loading user:', ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || err.message);\n        setToken(null);\n        setAuthToken(null);\n        setUser(null);\n        setIsAuthenticated(false);\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadUser();\n  }, [token]);\n\n  // Refresh token on mount and when token changes\n  useEffect(() => {\n    const refreshToken = async () => {\n      try {\n        if (token) {\n          setAuthToken(token);\n        }\n      } catch (err) {\n        console.error('Error refreshing token:', err);\n        logout();\n      }\n    };\n    refreshToken();\n  }, [token]);\n\n  // Register user\n  const register = async userData => {\n    try {\n      const res = await axios.post('/api/auth/register', userData);\n      setError(null);\n      return res.data;\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      setError(((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || 'Registration failed');\n      throw err;\n    }\n  };\n\n  // Verify OTP\n  const verifyOTP = async verifyData => {\n    try {\n      const res = await axios.post('/api/auth/verify-otp', verifyData);\n      const {\n        token,\n        user\n      } = res.data;\n\n      // Set token first\n      setToken(token);\n      setAuthToken(token);\n\n      // Then set other state\n      setUser(user);\n      setIsAuthenticated(true);\n      setError(null);\n      return res.data;\n    } catch (err) {\n      var _err$response3, _err$response3$data;\n      setError(((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : (_err$response3$data = _err$response3.data) === null || _err$response3$data === void 0 ? void 0 : _err$response3$data.message) || 'OTP verification failed');\n      // Clear everything on verification failure\n      setToken(null);\n      setAuthToken(null);\n      setUser(null);\n      setIsAuthenticated(false);\n      throw err;\n    }\n  };\n\n  // Resend OTP\n  const resendOTP = async email => {\n    try {\n      const res = await axios.post('/api/auth/resend-otp', {\n        email\n      });\n      return res.data;\n    } catch (err) {\n      var _err$response4, _err$response4$data;\n      setError(((_err$response4 = err.response) === null || _err$response4 === void 0 ? void 0 : (_err$response4$data = _err$response4.data) === null || _err$response4$data === void 0 ? void 0 : _err$response4$data.message) || 'Failed to resend OTP');\n      throw err;\n    }\n  };\n\n  // Login user\n  const login = async loginData => {\n    try {\n      const res = await axios.post('/api/auth/login', loginData);\n      const {\n        token,\n        user\n      } = res.data;\n\n      // Set token first to ensure it's available for subsequent requests\n      setToken(token);\n      setAuthToken(token);\n\n      // Then set other state\n      setUser(user);\n      setIsAuthenticated(true);\n      setError(null);\n      return res.data;\n    } catch (err) {\n      var _err$response5, _err$response5$data;\n      setError(((_err$response5 = err.response) === null || _err$response5 === void 0 ? void 0 : (_err$response5$data = _err$response5.data) === null || _err$response5$data === void 0 ? void 0 : _err$response5$data.message) || 'Login failed');\n      // Clear everything on login failure\n      setToken(null);\n      setAuthToken(null);\n      setUser(null);\n      setIsAuthenticated(false);\n      throw err;\n    }\n  };\n\n  // Update user profile\n  const updateUser = updatedUserData => {\n    setUser({\n      ...user,\n      ...updatedUserData\n    });\n  };\n\n  // Logout user\n  const logout = () => {\n    // Clear token first\n    setToken(null);\n    setAuthToken(null);\n    localStorage.removeItem('token');\n\n    // Then clear other state\n    setUser(null);\n    setIsAuthenticated(false);\n    setError(null);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      token,\n      isAuthenticated,\n      loading,\n      error,\n      register,\n      verifyOTP,\n      resendOTP,\n      login,\n      updateUser,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"p/4YAW+3UUx9R6Z1GvXucN+TRk0=\");\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","axios","setAuthToken","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","token","setToken","localStorage","getItem","isAuthenticated","setIsAuthenticated","loading","setLoading","error","setError","loadUser","res","get","data","err","_err$response","_err$response$data","console","response","message","refreshToken","logout","register","userData","post","_err$response2","_err$response2$data","verifyOTP","verifyData","_err$response3","_err$response3$data","resendOTP","email","_err$response4","_err$response4$data","login","loginData","_err$response5","_err$response5$data","updateUser","updatedUserData","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/HP/Desktop/fileshare/client/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport axios, { setAuthToken } from '../utils/axios';\n\nconst AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem('token'));\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Load user if token exists\n  useEffect(() => {\n    const loadUser = async () => {\n      try {\n        if (token) {\n          setAuthToken(token);\n          const res = await axios.get('/api/auth/me');\n          setUser(res.data.data);\n          setIsAuthenticated(true);\n        } else {\n          setAuthToken(null);\n          setUser(null);\n          setIsAuthenticated(false);\n        }\n      } catch (err) {\n        console.error('Error loading user:', err.response?.data?.message || err.message);\n        setToken(null);\n        setAuthToken(null);\n        setUser(null);\n        setIsAuthenticated(false);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadUser();\n  }, [token]);\n\n  // Refresh token on mount and when token changes\n  useEffect(() => {\n    const refreshToken = async () => {\n      try {\n        if (token) {\n          setAuthToken(token);\n        }\n      } catch (err) {\n        console.error('Error refreshing token:', err);\n        logout();\n      }\n    };\n\n    refreshToken();\n  }, [token]);\n\n  // Register user\n  const register = async (userData) => {\n    try {\n      const res = await axios.post('/api/auth/register', userData);\n      setError(null);\n      return res.data;\n    } catch (err) {\n      setError(err.response?.data?.message || 'Registration failed');\n      throw err;\n    }\n  };\n\n  // Verify OTP\n  const verifyOTP = async (verifyData) => {\n    try {\n      const res = await axios.post('/api/auth/verify-otp', verifyData);\n      const { token, user } = res.data;\n      \n      // Set token first\n      setToken(token);\n      setAuthToken(token);\n      \n      // Then set other state\n      setUser(user);\n      setIsAuthenticated(true);\n      setError(null);\n      \n      return res.data;\n    } catch (err) {\n      setError(err.response?.data?.message || 'OTP verification failed');\n      // Clear everything on verification failure\n      setToken(null);\n      setAuthToken(null);\n      setUser(null);\n      setIsAuthenticated(false);\n      throw err;\n    }\n  };\n\n  // Resend OTP\n  const resendOTP = async (email) => {\n    try {\n      const res = await axios.post('/api/auth/resend-otp', { email });\n      return res.data;\n    } catch (err) {\n      setError(err.response?.data?.message || 'Failed to resend OTP');\n      throw err;\n    }\n  };\n\n  // Login user\n  const login = async (loginData) => {\n    try {\n      const res = await axios.post('/api/auth/login', loginData);\n      const { token, user } = res.data;\n      \n      // Set token first to ensure it's available for subsequent requests\n      setToken(token);\n      setAuthToken(token);\n      \n      // Then set other state\n      setUser(user);\n      setIsAuthenticated(true);\n      setError(null);\n      \n      return res.data;\n    } catch (err) {\n      setError(err.response?.data?.message || 'Login failed');\n      // Clear everything on login failure\n      setToken(null);\n      setAuthToken(null);\n      setUser(null);\n      setIsAuthenticated(false);\n      throw err;\n    }\n  };\n\n  // Update user profile\n  const updateUser = (updatedUserData) => {\n    setUser({ ...user, ...updatedUserData });\n  };\n\n  // Logout user\n  const logout = () => {\n    // Clear token first\n    setToken(null);\n    setAuthToken(null);\n    localStorage.removeItem('token');\n    \n    // Then clear other state\n    setUser(null);\n    setIsAuthenticated(false);\n    setError(null);\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        token,\n        isAuthenticated,\n        loading,\n        error,\n        register,\n        verifyOTP,\n        resendOTP,\n        login,\n        updateUser,\n        logout\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthContext;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}